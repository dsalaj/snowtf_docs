# This workflow's name, displayed in the GitHub Actions UI.
name: "Pull Request Docs Build and Deploy"

# Triggers the workflow on pull request events.
on:
  pull_request:
    # Optionally, you can specify branches to run on, e.g.,
    # branches:
    #   - main
    #   - master

# Define the jobs that will run as part of this workflow.
jobs:
  # Job to build the Sphinx documentation.
  build-docs:
    # The type of runner the job will execute on.
    runs-on: ubuntu-latest

    # Permissions needed for this job.
    # `contents: read` is needed to checkout the repository.
    # `actions: write` is needed for `upload-artifact`.
    permissions:
      contents: read
      actions: write

    # Steps define the sequence of tasks for this job.
    steps:
      # Step 1: Checkout the repository code.
      # Uses actions/checkout@v4 for improved performance and features.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Python environment.
      # Sphinx requires Python to run.
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          # Specify the Python version to use.
          python-version: '3.x' # Use '3.x' to get the latest Python 3.

      # Step 3: Install Sphinx and other dependencies.
      # Assumes your Sphinx documentation might have a requirements.txt file.
      - name: Install Sphinx and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx # Install Sphinx core
          # If you have a requirements.txt for your docs, uncomment the line below:
          pip install -r requirements.txt

      # Step 4: Build the Sphinx documentation.
      # This explicitly runs the 'make html' command in your root directory.
      - name: Build Sphinx HTML documentation
        run: |
          make html
        # Ensure the build command exits successfully.

      # Step 5: Upload the built documentation as an artifact.
      # This artifact will be downloaded by the deployment job.
      # Uses actions/upload-artifact@v4 for improved performance and features.
      - name: Upload documentation artifact
        uses: actions/upload-artifact@v4
        with:
          # Name of the artifact. This name is important for the download step.
          name: github-pages
          # Path to the built HTML documentation.
          path: _build/html/
          # Retain the artifact for a short period (e.g., 1 day) for debugging.
          retention-days: 1

  # Job to deploy the built documentation to GitHub Pages.
  deploy-pages:
    # This job depends on the 'build-docs' job completing successfully.
    needs: build-docs
    # The type of runner the job will execute on.
    runs-on: ubuntu-latest

    # Condition to only run this job on pushes to the main branch.
    # This prevents deployment from feature branches in pull requests.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Change 'main' to 'master' if that's your default branch

    # Permissions needed for GitHub Pages deployment.
    # `pages: write` allows writing to the GitHub Pages branch.
    # `id-token: write` is required for OpenID Connect (OIDC) authentication
    # used by the deploy action.
    permissions:
      pages: write
      id-token: write

    # Environment variables for GitHub Pages.
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Steps define the sequence of tasks for this job.
    steps:
      # Step 1: Download the artifact built in the previous job.
      # Uses actions/download-artifact@v4.
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: github-pages

      # Step 2: Upload the artifact to GitHub Pages.
      # Uses actions/upload-pages-artifact@v3 to prepare the artifact for deployment.
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # The path to the directory containing the static files to be deployed.
          path: . # The artifact was downloaded to the current directory.

      # Step 3: Deploy to GitHub Pages.
      # Uses actions/deploy-pages@v4 to publish the content.
      - name: Deploy to GitHub Pages
        id: deployment # Assign an ID to this step to access its outputs.
        uses: actions/deploy-pages@v4

